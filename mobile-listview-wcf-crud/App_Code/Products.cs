using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;
using NorthwindModel;
using System.Runtime.Serialization;
using System.IO;

[ServiceContract(Namespace = "")]
[ServiceBehavior(IncludeExceptionDetailInFaults = true)] 
[AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
public class Products
{
    /// <summary>
    /// Creates new product by inserting the data posted by the Kendo Grid in the database.
    /// </summary>
    /// <param name="product">The product created by the user.</param>
    /// <returns>The inserted product so the Kendo Grid is aware of the database generated ProductID</returns>
    [OperationContract]
    public IEnumerable<ProductViewModel> Create(ProductViewModel product)
    {
        using (var northwind = new Northwind())
        {
            // Create a new Product entity and set its properties from target
            var target = new Product
            {
                ProductName = product.ProductName,
                UnitPrice = product.UnitPrice,
                UnitsInStock = product.UnitsInStock,
                Discontinued = product.Discontinued
            };

            // Add the entity
            northwind.Products.AddObject(target);

            // Insert all created product to the database
            northwind.SaveChanges();

            product.ProductID = target.ProductID;

            // Return the inserted product - the Kendo Grid needs their ProductID which is generated by SQL server during insertion
            return new[] { product };
        }
    }

    /// <summary>
    /// Reads the available product to provide data for the Kendo Grid
    /// </summary>
    /// <returns>All available product</returns>
    [OperationContract]
    [WebInvoke( ResponseFormat = WebMessageFormat.Json,
                  RequestFormat = WebMessageFormat.Json)]    
    public IEnumerable<ProductViewModel> Read()
    {
        using (var northwind = new Northwind())
        {
            return northwind.Products
                .OrderByDescending(p => p.ProductID) //EF requires sorted IQueryable in order to do paging
                // Use a view model to avoid serializing internal Entity Framework properties as JSON
                .Select(p => new ProductViewModel
                {
                    ProductID = p.ProductID,
                    ProductName = p.ProductName,
                    UnitPrice = p.UnitPrice,
                    UnitsInStock = p.UnitsInStock,
                    Discontinued = p.Discontinued
                })
                .ToList();
        }
    }

    /// <summary>
    /// Updates existing product by updating the database with the data posted by the Kendo Grid.
    /// </summary>
    /// <param name="product">The product updated by the user</param>
    [OperationContract]
    public void Update(ProductViewModel product)
    {
        using (var northwind = new Northwind())
        {
            // Create a new Product entity and set its properties from target
            var target = new Product
            {
                ProductID = (int)product.ProductID,
                ProductName = product.ProductName,
                UnitPrice = product.UnitPrice,
                UnitsInStock = product.UnitsInStock,
                Discontinued = product.Discontinued
            };

            // Attach the entity
            northwind.Products.Attach(target);
            // Change its state to Modified so Entity Framework can update the existing target instead of creating a new one
            northwind.ObjectStateManager.ChangeObjectState(target, EntityState.Modified);

            // Save all updated product to the database
            northwind.SaveChanges();
        }
    }

    /// <summary>
    /// Destroys existing product by deleting them from the database.
    /// </summary>
    /// <param name="product">The product deleted by the user</param>
    [OperationContract]
    public void Destroy(ProductViewModel product)
    {
        using (var northwind = new Northwind())
        {
            // Create a new Product entity and set its properties from target
            var target = new Product
            {
                ProductID = (int)product.ProductID,
            };

            // Attach the entity
            northwind.Products.Attach(target);
            // Delete the entity
            northwind.Products.DeleteObject(target);

            // Delete the product from the database
            northwind.SaveChanges();
        }
    }
	// Add more operations here and mark them with [OperationContract]
}
